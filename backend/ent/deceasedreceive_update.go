// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/B6113759/app/ent/coolroom"
	"github.com/B6113759/app/ent/deceasedreceive"
	"github.com/B6113759/app/ent/patient"
	"github.com/B6113759/app/ent/predicate"
	"github.com/B6113759/app/ent/relative"
	"github.com/B6113759/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DeceasedReceiveUpdate is the builder for updating DeceasedReceive entities.
type DeceasedReceiveUpdate struct {
	config
	hooks      []Hook
	mutation   *DeceasedReceiveMutation
	predicates []predicate.DeceasedReceive
}

// Where adds a new predicate for the builder.
func (dru *DeceasedReceiveUpdate) Where(ps ...predicate.DeceasedReceive) *DeceasedReceiveUpdate {
	dru.predicates = append(dru.predicates, ps...)
	return dru
}

// SetDeathTime sets the death_time field.
func (dru *DeceasedReceiveUpdate) SetDeathTime(t time.Time) *DeceasedReceiveUpdate {
	dru.mutation.SetDeathTime(t)
	return dru
}

// SetDoctorID sets the doctor edge to User by id.
func (dru *DeceasedReceiveUpdate) SetDoctorID(id int) *DeceasedReceiveUpdate {
	dru.mutation.SetDoctorID(id)
	return dru
}

// SetNillableDoctorID sets the doctor edge to User by id if the given value is not nil.
func (dru *DeceasedReceiveUpdate) SetNillableDoctorID(id *int) *DeceasedReceiveUpdate {
	if id != nil {
		dru = dru.SetDoctorID(*id)
	}
	return dru
}

// SetDoctor sets the doctor edge to User.
func (dru *DeceasedReceiveUpdate) SetDoctor(u *User) *DeceasedReceiveUpdate {
	return dru.SetDoctorID(u.ID)
}

// SetRelativeID sets the relative edge to Relative by id.
func (dru *DeceasedReceiveUpdate) SetRelativeID(id int) *DeceasedReceiveUpdate {
	dru.mutation.SetRelativeID(id)
	return dru
}

// SetNillableRelativeID sets the relative edge to Relative by id if the given value is not nil.
func (dru *DeceasedReceiveUpdate) SetNillableRelativeID(id *int) *DeceasedReceiveUpdate {
	if id != nil {
		dru = dru.SetRelativeID(*id)
	}
	return dru
}

// SetRelative sets the relative edge to Relative.
func (dru *DeceasedReceiveUpdate) SetRelative(r *Relative) *DeceasedReceiveUpdate {
	return dru.SetRelativeID(r.ID)
}

// SetCoolroomID sets the coolroom edge to Coolroom by id.
func (dru *DeceasedReceiveUpdate) SetCoolroomID(id int) *DeceasedReceiveUpdate {
	dru.mutation.SetCoolroomID(id)
	return dru
}

// SetNillableCoolroomID sets the coolroom edge to Coolroom by id if the given value is not nil.
func (dru *DeceasedReceiveUpdate) SetNillableCoolroomID(id *int) *DeceasedReceiveUpdate {
	if id != nil {
		dru = dru.SetCoolroomID(*id)
	}
	return dru
}

// SetCoolroom sets the coolroom edge to Coolroom.
func (dru *DeceasedReceiveUpdate) SetCoolroom(c *Coolroom) *DeceasedReceiveUpdate {
	return dru.SetCoolroomID(c.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (dru *DeceasedReceiveUpdate) SetPatientID(id int) *DeceasedReceiveUpdate {
	dru.mutation.SetPatientID(id)
	return dru
}

// SetPatient sets the patient edge to Patient.
func (dru *DeceasedReceiveUpdate) SetPatient(p *Patient) *DeceasedReceiveUpdate {
	return dru.SetPatientID(p.ID)
}

// Mutation returns the DeceasedReceiveMutation object of the builder.
func (dru *DeceasedReceiveUpdate) Mutation() *DeceasedReceiveMutation {
	return dru.mutation
}

// ClearDoctor clears the doctor edge to User.
func (dru *DeceasedReceiveUpdate) ClearDoctor() *DeceasedReceiveUpdate {
	dru.mutation.ClearDoctor()
	return dru
}

// ClearRelative clears the relative edge to Relative.
func (dru *DeceasedReceiveUpdate) ClearRelative() *DeceasedReceiveUpdate {
	dru.mutation.ClearRelative()
	return dru
}

// ClearCoolroom clears the coolroom edge to Coolroom.
func (dru *DeceasedReceiveUpdate) ClearCoolroom() *DeceasedReceiveUpdate {
	dru.mutation.ClearCoolroom()
	return dru
}

// ClearPatient clears the patient edge to Patient.
func (dru *DeceasedReceiveUpdate) ClearPatient() *DeceasedReceiveUpdate {
	dru.mutation.ClearPatient()
	return dru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dru *DeceasedReceiveUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := dru.mutation.PatientID(); dru.mutation.PatientCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"patient\"")
	}
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeceasedReceiveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeceasedReceiveUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeceasedReceiveUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeceasedReceiveUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DeceasedReceiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deceasedreceive.Table,
			Columns: deceasedreceive.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deceasedreceive.FieldID,
			},
		},
	}
	if ps := dru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.DeathTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deceasedreceive.FieldDeathTime,
		})
	}
	if dru.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.DoctorTable,
			Columns: []string{deceasedreceive.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.DoctorTable,
			Columns: []string{deceasedreceive.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.RelativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.RelativeTable,
			Columns: []string{deceasedreceive.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relative.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RelativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.RelativeTable,
			Columns: []string{deceasedreceive.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relative.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.CoolroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.CoolroomTable,
			Columns: []string{deceasedreceive.CoolroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.CoolroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.CoolroomTable,
			Columns: []string{deceasedreceive.CoolroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deceasedreceive.PatientTable,
			Columns: []string{deceasedreceive.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deceasedreceive.PatientTable,
			Columns: []string{deceasedreceive.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deceasedreceive.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeceasedReceiveUpdateOne is the builder for updating a single DeceasedReceive entity.
type DeceasedReceiveUpdateOne struct {
	config
	hooks    []Hook
	mutation *DeceasedReceiveMutation
}

// SetDeathTime sets the death_time field.
func (druo *DeceasedReceiveUpdateOne) SetDeathTime(t time.Time) *DeceasedReceiveUpdateOne {
	druo.mutation.SetDeathTime(t)
	return druo
}

// SetDoctorID sets the doctor edge to User by id.
func (druo *DeceasedReceiveUpdateOne) SetDoctorID(id int) *DeceasedReceiveUpdateOne {
	druo.mutation.SetDoctorID(id)
	return druo
}

// SetNillableDoctorID sets the doctor edge to User by id if the given value is not nil.
func (druo *DeceasedReceiveUpdateOne) SetNillableDoctorID(id *int) *DeceasedReceiveUpdateOne {
	if id != nil {
		druo = druo.SetDoctorID(*id)
	}
	return druo
}

// SetDoctor sets the doctor edge to User.
func (druo *DeceasedReceiveUpdateOne) SetDoctor(u *User) *DeceasedReceiveUpdateOne {
	return druo.SetDoctorID(u.ID)
}

// SetRelativeID sets the relative edge to Relative by id.
func (druo *DeceasedReceiveUpdateOne) SetRelativeID(id int) *DeceasedReceiveUpdateOne {
	druo.mutation.SetRelativeID(id)
	return druo
}

// SetNillableRelativeID sets the relative edge to Relative by id if the given value is not nil.
func (druo *DeceasedReceiveUpdateOne) SetNillableRelativeID(id *int) *DeceasedReceiveUpdateOne {
	if id != nil {
		druo = druo.SetRelativeID(*id)
	}
	return druo
}

// SetRelative sets the relative edge to Relative.
func (druo *DeceasedReceiveUpdateOne) SetRelative(r *Relative) *DeceasedReceiveUpdateOne {
	return druo.SetRelativeID(r.ID)
}

// SetCoolroomID sets the coolroom edge to Coolroom by id.
func (druo *DeceasedReceiveUpdateOne) SetCoolroomID(id int) *DeceasedReceiveUpdateOne {
	druo.mutation.SetCoolroomID(id)
	return druo
}

// SetNillableCoolroomID sets the coolroom edge to Coolroom by id if the given value is not nil.
func (druo *DeceasedReceiveUpdateOne) SetNillableCoolroomID(id *int) *DeceasedReceiveUpdateOne {
	if id != nil {
		druo = druo.SetCoolroomID(*id)
	}
	return druo
}

// SetCoolroom sets the coolroom edge to Coolroom.
func (druo *DeceasedReceiveUpdateOne) SetCoolroom(c *Coolroom) *DeceasedReceiveUpdateOne {
	return druo.SetCoolroomID(c.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (druo *DeceasedReceiveUpdateOne) SetPatientID(id int) *DeceasedReceiveUpdateOne {
	druo.mutation.SetPatientID(id)
	return druo
}

// SetPatient sets the patient edge to Patient.
func (druo *DeceasedReceiveUpdateOne) SetPatient(p *Patient) *DeceasedReceiveUpdateOne {
	return druo.SetPatientID(p.ID)
}

// Mutation returns the DeceasedReceiveMutation object of the builder.
func (druo *DeceasedReceiveUpdateOne) Mutation() *DeceasedReceiveMutation {
	return druo.mutation
}

// ClearDoctor clears the doctor edge to User.
func (druo *DeceasedReceiveUpdateOne) ClearDoctor() *DeceasedReceiveUpdateOne {
	druo.mutation.ClearDoctor()
	return druo
}

// ClearRelative clears the relative edge to Relative.
func (druo *DeceasedReceiveUpdateOne) ClearRelative() *DeceasedReceiveUpdateOne {
	druo.mutation.ClearRelative()
	return druo
}

// ClearCoolroom clears the coolroom edge to Coolroom.
func (druo *DeceasedReceiveUpdateOne) ClearCoolroom() *DeceasedReceiveUpdateOne {
	druo.mutation.ClearCoolroom()
	return druo
}

// ClearPatient clears the patient edge to Patient.
func (druo *DeceasedReceiveUpdateOne) ClearPatient() *DeceasedReceiveUpdateOne {
	druo.mutation.ClearPatient()
	return druo
}

// Save executes the query and returns the updated entity.
func (druo *DeceasedReceiveUpdateOne) Save(ctx context.Context) (*DeceasedReceive, error) {

	if _, ok := druo.mutation.PatientID(); druo.mutation.PatientCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"patient\"")
	}
	var (
		err  error
		node *DeceasedReceive
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeceasedReceiveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeceasedReceiveUpdateOne) SaveX(ctx context.Context) *DeceasedReceive {
	dr, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return dr
}

// Exec executes the query on the entity.
func (druo *DeceasedReceiveUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeceasedReceiveUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DeceasedReceiveUpdateOne) sqlSave(ctx context.Context) (dr *DeceasedReceive, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deceasedreceive.Table,
			Columns: deceasedreceive.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deceasedreceive.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeceasedReceive.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := druo.mutation.DeathTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deceasedreceive.FieldDeathTime,
		})
	}
	if druo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.DoctorTable,
			Columns: []string{deceasedreceive.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.DoctorTable,
			Columns: []string{deceasedreceive.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.RelativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.RelativeTable,
			Columns: []string{deceasedreceive.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relative.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RelativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.RelativeTable,
			Columns: []string{deceasedreceive.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relative.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.CoolroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.CoolroomTable,
			Columns: []string{deceasedreceive.CoolroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.CoolroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deceasedreceive.CoolroomTable,
			Columns: []string{deceasedreceive.CoolroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deceasedreceive.PatientTable,
			Columns: []string{deceasedreceive.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deceasedreceive.PatientTable,
			Columns: []string{deceasedreceive.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	dr = &DeceasedReceive{config: druo.config}
	_spec.Assign = dr.assignValues
	_spec.ScanValues = dr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deceasedreceive.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return dr, nil
}
