// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/B6113759/app/ent/coolroom"
	"github.com/B6113759/app/ent/coolroomtype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CoolroomTypeCreate is the builder for creating a CoolroomType entity.
type CoolroomTypeCreate struct {
	config
	mutation *CoolroomTypeMutation
	hooks    []Hook
}

// SetCoolroomtypeName sets the coolroomtype_name field.
func (ctc *CoolroomTypeCreate) SetCoolroomtypeName(s string) *CoolroomTypeCreate {
	ctc.mutation.SetCoolroomtypeName(s)
	return ctc
}

// AddCoolroomIDs adds the coolrooms edge to Coolroom by ids.
func (ctc *CoolroomTypeCreate) AddCoolroomIDs(ids ...int) *CoolroomTypeCreate {
	ctc.mutation.AddCoolroomIDs(ids...)
	return ctc
}

// AddCoolrooms adds the coolrooms edges to Coolroom.
func (ctc *CoolroomTypeCreate) AddCoolrooms(c ...*Coolroom) *CoolroomTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddCoolroomIDs(ids...)
}

// Mutation returns the CoolroomTypeMutation object of the builder.
func (ctc *CoolroomTypeCreate) Mutation() *CoolroomTypeMutation {
	return ctc.mutation
}

// Save creates the CoolroomType in the database.
func (ctc *CoolroomTypeCreate) Save(ctx context.Context) (*CoolroomType, error) {
	if _, ok := ctc.mutation.CoolroomtypeName(); !ok {
		return nil, &ValidationError{Name: "coolroomtype_name", err: errors.New("ent: missing required field \"coolroomtype_name\"")}
	}
	if v, ok := ctc.mutation.CoolroomtypeName(); ok {
		if err := coolroomtype.CoolroomtypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "coolroomtype_name", err: fmt.Errorf("ent: validator failed for field \"coolroomtype_name\": %w", err)}
		}
	}
	var (
		err  error
		node *CoolroomType
	)
	if len(ctc.hooks) == 0 {
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoolroomTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctc.mutation = mutation
			node, err = ctc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			mut = ctc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CoolroomTypeCreate) SaveX(ctx context.Context) *CoolroomType {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ctc *CoolroomTypeCreate) sqlSave(ctx context.Context) (*CoolroomType, error) {
	ct, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ct.ID = int(id)
	return ct, nil
}

func (ctc *CoolroomTypeCreate) createSpec() (*CoolroomType, *sqlgraph.CreateSpec) {
	var (
		ct    = &CoolroomType{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coolroomtype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coolroomtype.FieldID,
			},
		}
	)
	if value, ok := ctc.mutation.CoolroomtypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coolroomtype.FieldCoolroomtypeName,
		})
		ct.CoolroomtypeName = value
	}
	if nodes := ctc.mutation.CoolroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coolroomtype.CoolroomsTable,
			Columns: []string{coolroomtype.CoolroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ct, _spec
}
