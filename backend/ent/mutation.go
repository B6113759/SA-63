// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/B6113759/app/ent/coolroom"
	"github.com/B6113759/app/ent/coolroomtype"
	"github.com/B6113759/app/ent/deceasedreceive"
	"github.com/B6113759/app/ent/patient"
	"github.com/B6113759/app/ent/relative"
	"github.com/B6113759/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoolroom        = "Coolroom"
	TypeCoolroomType    = "CoolroomType"
	TypeDeceasedReceive = "DeceasedReceive"
	TypePatient         = "Patient"
	TypeRelative        = "Relative"
	TypeUser            = "User"
)

// CoolroomMutation represents an operation that mutate the Coolrooms
// nodes in the graph.
type CoolroomMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	coolroom_name           *string
	coolroom_capacity       *int
	addcoolroom_capacity    *int
	clearedFields           map[string]struct{}
	deceasedreceives        map[int]struct{}
	removeddeceasedreceives map[int]struct{}
	coolroomtype            *int
	clearedcoolroomtype     bool
	done                    bool
	oldValue                func(context.Context) (*Coolroom, error)
}

var _ ent.Mutation = (*CoolroomMutation)(nil)

// coolroomOption allows to manage the mutation configuration using functional options.
type coolroomOption func(*CoolroomMutation)

// newCoolroomMutation creates new mutation for $n.Name.
func newCoolroomMutation(c config, op Op, opts ...coolroomOption) *CoolroomMutation {
	m := &CoolroomMutation{
		config:        c,
		op:            op,
		typ:           TypeCoolroom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoolroomID sets the id field of the mutation.
func withCoolroomID(id int) coolroomOption {
	return func(m *CoolroomMutation) {
		var (
			err   error
			once  sync.Once
			value *Coolroom
		)
		m.oldValue = func(ctx context.Context) (*Coolroom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coolroom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoolroom sets the old Coolroom of the mutation.
func withCoolroom(node *Coolroom) coolroomOption {
	return func(m *CoolroomMutation) {
		m.oldValue = func(context.Context) (*Coolroom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoolroomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoolroomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CoolroomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCoolroomName sets the coolroom_name field.
func (m *CoolroomMutation) SetCoolroomName(s string) {
	m.coolroom_name = &s
}

// CoolroomName returns the coolroom_name value in the mutation.
func (m *CoolroomMutation) CoolroomName() (r string, exists bool) {
	v := m.coolroom_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCoolroomName returns the old coolroom_name value of the Coolroom.
// If the Coolroom object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CoolroomMutation) OldCoolroomName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoolroomName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoolroomName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoolroomName: %w", err)
	}
	return oldValue.CoolroomName, nil
}

// ResetCoolroomName reset all changes of the "coolroom_name" field.
func (m *CoolroomMutation) ResetCoolroomName() {
	m.coolroom_name = nil
}

// SetCoolroomCapacity sets the coolroom_capacity field.
func (m *CoolroomMutation) SetCoolroomCapacity(i int) {
	m.coolroom_capacity = &i
	m.addcoolroom_capacity = nil
}

// CoolroomCapacity returns the coolroom_capacity value in the mutation.
func (m *CoolroomMutation) CoolroomCapacity() (r int, exists bool) {
	v := m.coolroom_capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldCoolroomCapacity returns the old coolroom_capacity value of the Coolroom.
// If the Coolroom object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CoolroomMutation) OldCoolroomCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoolroomCapacity is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoolroomCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoolroomCapacity: %w", err)
	}
	return oldValue.CoolroomCapacity, nil
}

// AddCoolroomCapacity adds i to coolroom_capacity.
func (m *CoolroomMutation) AddCoolroomCapacity(i int) {
	if m.addcoolroom_capacity != nil {
		*m.addcoolroom_capacity += i
	} else {
		m.addcoolroom_capacity = &i
	}
}

// AddedCoolroomCapacity returns the value that was added to the coolroom_capacity field in this mutation.
func (m *CoolroomMutation) AddedCoolroomCapacity() (r int, exists bool) {
	v := m.addcoolroom_capacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoolroomCapacity reset all changes of the "coolroom_capacity" field.
func (m *CoolroomMutation) ResetCoolroomCapacity() {
	m.coolroom_capacity = nil
	m.addcoolroom_capacity = nil
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (m *CoolroomMutation) AddDeceasedreceifeIDs(ids ...int) {
	if m.deceasedreceives == nil {
		m.deceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.deceasedreceives[ids[i]] = struct{}{}
	}
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (m *CoolroomMutation) RemoveDeceasedreceifeIDs(ids ...int) {
	if m.removeddeceasedreceives == nil {
		m.removeddeceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeceasedreceives[ids[i]] = struct{}{}
	}
}

// RemovedDeceasedreceives returns the removed ids of deceasedreceives.
func (m *CoolroomMutation) RemovedDeceasedreceivesIDs() (ids []int) {
	for id := range m.removeddeceasedreceives {
		ids = append(ids, id)
	}
	return
}

// DeceasedreceivesIDs returns the deceasedreceives ids in the mutation.
func (m *CoolroomMutation) DeceasedreceivesIDs() (ids []int) {
	for id := range m.deceasedreceives {
		ids = append(ids, id)
	}
	return
}

// ResetDeceasedreceives reset all changes of the "deceasedreceives" edge.
func (m *CoolroomMutation) ResetDeceasedreceives() {
	m.deceasedreceives = nil
	m.removeddeceasedreceives = nil
}

// SetCoolroomtypeID sets the coolroomtype edge to CoolroomType by id.
func (m *CoolroomMutation) SetCoolroomtypeID(id int) {
	m.coolroomtype = &id
}

// ClearCoolroomtype clears the coolroomtype edge to CoolroomType.
func (m *CoolroomMutation) ClearCoolroomtype() {
	m.clearedcoolroomtype = true
}

// CoolroomtypeCleared returns if the edge coolroomtype was cleared.
func (m *CoolroomMutation) CoolroomtypeCleared() bool {
	return m.clearedcoolroomtype
}

// CoolroomtypeID returns the coolroomtype id in the mutation.
func (m *CoolroomMutation) CoolroomtypeID() (id int, exists bool) {
	if m.coolroomtype != nil {
		return *m.coolroomtype, true
	}
	return
}

// CoolroomtypeIDs returns the coolroomtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CoolroomtypeID instead. It exists only for internal usage by the builders.
func (m *CoolroomMutation) CoolroomtypeIDs() (ids []int) {
	if id := m.coolroomtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoolroomtype reset all changes of the "coolroomtype" edge.
func (m *CoolroomMutation) ResetCoolroomtype() {
	m.coolroomtype = nil
	m.clearedcoolroomtype = false
}

// Op returns the operation name.
func (m *CoolroomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Coolroom).
func (m *CoolroomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CoolroomMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.coolroom_name != nil {
		fields = append(fields, coolroom.FieldCoolroomName)
	}
	if m.coolroom_capacity != nil {
		fields = append(fields, coolroom.FieldCoolroomCapacity)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CoolroomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coolroom.FieldCoolroomName:
		return m.CoolroomName()
	case coolroom.FieldCoolroomCapacity:
		return m.CoolroomCapacity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CoolroomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coolroom.FieldCoolroomName:
		return m.OldCoolroomName(ctx)
	case coolroom.FieldCoolroomCapacity:
		return m.OldCoolroomCapacity(ctx)
	}
	return nil, fmt.Errorf("unknown Coolroom field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CoolroomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coolroom.FieldCoolroomName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoolroomName(v)
		return nil
	case coolroom.FieldCoolroomCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoolroomCapacity(v)
		return nil
	}
	return fmt.Errorf("unknown Coolroom field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CoolroomMutation) AddedFields() []string {
	var fields []string
	if m.addcoolroom_capacity != nil {
		fields = append(fields, coolroom.FieldCoolroomCapacity)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CoolroomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coolroom.FieldCoolroomCapacity:
		return m.AddedCoolroomCapacity()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CoolroomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coolroom.FieldCoolroomCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoolroomCapacity(v)
		return nil
	}
	return fmt.Errorf("unknown Coolroom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CoolroomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CoolroomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoolroomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Coolroom nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CoolroomMutation) ResetField(name string) error {
	switch name {
	case coolroom.FieldCoolroomName:
		m.ResetCoolroomName()
		return nil
	case coolroom.FieldCoolroomCapacity:
		m.ResetCoolroomCapacity()
		return nil
	}
	return fmt.Errorf("unknown Coolroom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CoolroomMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.deceasedreceives != nil {
		edges = append(edges, coolroom.EdgeDeceasedreceives)
	}
	if m.coolroomtype != nil {
		edges = append(edges, coolroom.EdgeCoolroomtype)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CoolroomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coolroom.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.deceasedreceives))
		for id := range m.deceasedreceives {
			ids = append(ids, id)
		}
		return ids
	case coolroom.EdgeCoolroomtype:
		if id := m.coolroomtype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CoolroomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddeceasedreceives != nil {
		edges = append(edges, coolroom.EdgeDeceasedreceives)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CoolroomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coolroom.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.removeddeceasedreceives))
		for id := range m.removeddeceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CoolroomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcoolroomtype {
		edges = append(edges, coolroom.EdgeCoolroomtype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CoolroomMutation) EdgeCleared(name string) bool {
	switch name {
	case coolroom.EdgeCoolroomtype:
		return m.clearedcoolroomtype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CoolroomMutation) ClearEdge(name string) error {
	switch name {
	case coolroom.EdgeCoolroomtype:
		m.ClearCoolroomtype()
		return nil
	}
	return fmt.Errorf("unknown Coolroom unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CoolroomMutation) ResetEdge(name string) error {
	switch name {
	case coolroom.EdgeDeceasedreceives:
		m.ResetDeceasedreceives()
		return nil
	case coolroom.EdgeCoolroomtype:
		m.ResetCoolroomtype()
		return nil
	}
	return fmt.Errorf("unknown Coolroom edge %s", name)
}

// CoolroomTypeMutation represents an operation that mutate the CoolroomTypes
// nodes in the graph.
type CoolroomTypeMutation struct {
	config
	op                Op
	typ               string
	id                *int
	coolroomtype_name *string
	clearedFields     map[string]struct{}
	coolrooms         map[int]struct{}
	removedcoolrooms  map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*CoolroomType, error)
}

var _ ent.Mutation = (*CoolroomTypeMutation)(nil)

// coolroomtypeOption allows to manage the mutation configuration using functional options.
type coolroomtypeOption func(*CoolroomTypeMutation)

// newCoolroomTypeMutation creates new mutation for $n.Name.
func newCoolroomTypeMutation(c config, op Op, opts ...coolroomtypeOption) *CoolroomTypeMutation {
	m := &CoolroomTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeCoolroomType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoolroomTypeID sets the id field of the mutation.
func withCoolroomTypeID(id int) coolroomtypeOption {
	return func(m *CoolroomTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *CoolroomType
		)
		m.oldValue = func(ctx context.Context) (*CoolroomType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoolroomType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoolroomType sets the old CoolroomType of the mutation.
func withCoolroomType(node *CoolroomType) coolroomtypeOption {
	return func(m *CoolroomTypeMutation) {
		m.oldValue = func(context.Context) (*CoolroomType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoolroomTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoolroomTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CoolroomTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCoolroomtypeName sets the coolroomtype_name field.
func (m *CoolroomTypeMutation) SetCoolroomtypeName(s string) {
	m.coolroomtype_name = &s
}

// CoolroomtypeName returns the coolroomtype_name value in the mutation.
func (m *CoolroomTypeMutation) CoolroomtypeName() (r string, exists bool) {
	v := m.coolroomtype_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCoolroomtypeName returns the old coolroomtype_name value of the CoolroomType.
// If the CoolroomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CoolroomTypeMutation) OldCoolroomtypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoolroomtypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoolroomtypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoolroomtypeName: %w", err)
	}
	return oldValue.CoolroomtypeName, nil
}

// ResetCoolroomtypeName reset all changes of the "coolroomtype_name" field.
func (m *CoolroomTypeMutation) ResetCoolroomtypeName() {
	m.coolroomtype_name = nil
}

// AddCoolroomIDs adds the coolrooms edge to Coolroom by ids.
func (m *CoolroomTypeMutation) AddCoolroomIDs(ids ...int) {
	if m.coolrooms == nil {
		m.coolrooms = make(map[int]struct{})
	}
	for i := range ids {
		m.coolrooms[ids[i]] = struct{}{}
	}
}

// RemoveCoolroomIDs removes the coolrooms edge to Coolroom by ids.
func (m *CoolroomTypeMutation) RemoveCoolroomIDs(ids ...int) {
	if m.removedcoolrooms == nil {
		m.removedcoolrooms = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcoolrooms[ids[i]] = struct{}{}
	}
}

// RemovedCoolrooms returns the removed ids of coolrooms.
func (m *CoolroomTypeMutation) RemovedCoolroomsIDs() (ids []int) {
	for id := range m.removedcoolrooms {
		ids = append(ids, id)
	}
	return
}

// CoolroomsIDs returns the coolrooms ids in the mutation.
func (m *CoolroomTypeMutation) CoolroomsIDs() (ids []int) {
	for id := range m.coolrooms {
		ids = append(ids, id)
	}
	return
}

// ResetCoolrooms reset all changes of the "coolrooms" edge.
func (m *CoolroomTypeMutation) ResetCoolrooms() {
	m.coolrooms = nil
	m.removedcoolrooms = nil
}

// Op returns the operation name.
func (m *CoolroomTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoolroomType).
func (m *CoolroomTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CoolroomTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.coolroomtype_name != nil {
		fields = append(fields, coolroomtype.FieldCoolroomtypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CoolroomTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coolroomtype.FieldCoolroomtypeName:
		return m.CoolroomtypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CoolroomTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coolroomtype.FieldCoolroomtypeName:
		return m.OldCoolroomtypeName(ctx)
	}
	return nil, fmt.Errorf("unknown CoolroomType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CoolroomTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coolroomtype.FieldCoolroomtypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoolroomtypeName(v)
		return nil
	}
	return fmt.Errorf("unknown CoolroomType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CoolroomTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CoolroomTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CoolroomTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CoolroomType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CoolroomTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CoolroomTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoolroomTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoolroomType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CoolroomTypeMutation) ResetField(name string) error {
	switch name {
	case coolroomtype.FieldCoolroomtypeName:
		m.ResetCoolroomtypeName()
		return nil
	}
	return fmt.Errorf("unknown CoolroomType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CoolroomTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.coolrooms != nil {
		edges = append(edges, coolroomtype.EdgeCoolrooms)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CoolroomTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coolroomtype.EdgeCoolrooms:
		ids := make([]ent.Value, 0, len(m.coolrooms))
		for id := range m.coolrooms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CoolroomTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcoolrooms != nil {
		edges = append(edges, coolroomtype.EdgeCoolrooms)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CoolroomTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coolroomtype.EdgeCoolrooms:
		ids := make([]ent.Value, 0, len(m.removedcoolrooms))
		for id := range m.removedcoolrooms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CoolroomTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CoolroomTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CoolroomTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CoolroomType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CoolroomTypeMutation) ResetEdge(name string) error {
	switch name {
	case coolroomtype.EdgeCoolrooms:
		m.ResetCoolrooms()
		return nil
	}
	return fmt.Errorf("unknown CoolroomType edge %s", name)
}

// DeceasedReceiveMutation represents an operation that mutate the DeceasedReceives
// nodes in the graph.
type DeceasedReceiveMutation struct {
	config
	op              Op
	typ             string
	id              *int
	death_time      *time.Time
	clearedFields   map[string]struct{}
	doctor          *int
	cleareddoctor   bool
	relative        *int
	clearedrelative bool
	coolroom        *int
	clearedcoolroom bool
	patient         *int
	clearedpatient  bool
	done            bool
	oldValue        func(context.Context) (*DeceasedReceive, error)
}

var _ ent.Mutation = (*DeceasedReceiveMutation)(nil)

// deceasedreceiveOption allows to manage the mutation configuration using functional options.
type deceasedreceiveOption func(*DeceasedReceiveMutation)

// newDeceasedReceiveMutation creates new mutation for $n.Name.
func newDeceasedReceiveMutation(c config, op Op, opts ...deceasedreceiveOption) *DeceasedReceiveMutation {
	m := &DeceasedReceiveMutation{
		config:        c,
		op:            op,
		typ:           TypeDeceasedReceive,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeceasedReceiveID sets the id field of the mutation.
func withDeceasedReceiveID(id int) deceasedreceiveOption {
	return func(m *DeceasedReceiveMutation) {
		var (
			err   error
			once  sync.Once
			value *DeceasedReceive
		)
		m.oldValue = func(ctx context.Context) (*DeceasedReceive, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeceasedReceive.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeceasedReceive sets the old DeceasedReceive of the mutation.
func withDeceasedReceive(node *DeceasedReceive) deceasedreceiveOption {
	return func(m *DeceasedReceiveMutation) {
		m.oldValue = func(context.Context) (*DeceasedReceive, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeceasedReceiveMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeceasedReceiveMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DeceasedReceiveMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDeathTime sets the death_time field.
func (m *DeceasedReceiveMutation) SetDeathTime(t time.Time) {
	m.death_time = &t
}

// DeathTime returns the death_time value in the mutation.
func (m *DeceasedReceiveMutation) DeathTime() (r time.Time, exists bool) {
	v := m.death_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeathTime returns the old death_time value of the DeceasedReceive.
// If the DeceasedReceive object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DeceasedReceiveMutation) OldDeathTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeathTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeathTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeathTime: %w", err)
	}
	return oldValue.DeathTime, nil
}

// ResetDeathTime reset all changes of the "death_time" field.
func (m *DeceasedReceiveMutation) ResetDeathTime() {
	m.death_time = nil
}

// SetDoctorID sets the doctor edge to User by id.
func (m *DeceasedReceiveMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to User.
func (m *DeceasedReceiveMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *DeceasedReceiveMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *DeceasedReceiveMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *DeceasedReceiveMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DeceasedReceiveMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// SetRelativeID sets the relative edge to Relative by id.
func (m *DeceasedReceiveMutation) SetRelativeID(id int) {
	m.relative = &id
}

// ClearRelative clears the relative edge to Relative.
func (m *DeceasedReceiveMutation) ClearRelative() {
	m.clearedrelative = true
}

// RelativeCleared returns if the edge relative was cleared.
func (m *DeceasedReceiveMutation) RelativeCleared() bool {
	return m.clearedrelative
}

// RelativeID returns the relative id in the mutation.
func (m *DeceasedReceiveMutation) RelativeID() (id int, exists bool) {
	if m.relative != nil {
		return *m.relative, true
	}
	return
}

// RelativeIDs returns the relative ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RelativeID instead. It exists only for internal usage by the builders.
func (m *DeceasedReceiveMutation) RelativeIDs() (ids []int) {
	if id := m.relative; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelative reset all changes of the "relative" edge.
func (m *DeceasedReceiveMutation) ResetRelative() {
	m.relative = nil
	m.clearedrelative = false
}

// SetCoolroomID sets the coolroom edge to Coolroom by id.
func (m *DeceasedReceiveMutation) SetCoolroomID(id int) {
	m.coolroom = &id
}

// ClearCoolroom clears the coolroom edge to Coolroom.
func (m *DeceasedReceiveMutation) ClearCoolroom() {
	m.clearedcoolroom = true
}

// CoolroomCleared returns if the edge coolroom was cleared.
func (m *DeceasedReceiveMutation) CoolroomCleared() bool {
	return m.clearedcoolroom
}

// CoolroomID returns the coolroom id in the mutation.
func (m *DeceasedReceiveMutation) CoolroomID() (id int, exists bool) {
	if m.coolroom != nil {
		return *m.coolroom, true
	}
	return
}

// CoolroomIDs returns the coolroom ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CoolroomID instead. It exists only for internal usage by the builders.
func (m *DeceasedReceiveMutation) CoolroomIDs() (ids []int) {
	if id := m.coolroom; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCoolroom reset all changes of the "coolroom" edge.
func (m *DeceasedReceiveMutation) ResetCoolroom() {
	m.coolroom = nil
	m.clearedcoolroom = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DeceasedReceiveMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DeceasedReceiveMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DeceasedReceiveMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DeceasedReceiveMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DeceasedReceiveMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DeceasedReceiveMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Op returns the operation name.
func (m *DeceasedReceiveMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DeceasedReceive).
func (m *DeceasedReceiveMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DeceasedReceiveMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.death_time != nil {
		fields = append(fields, deceasedreceive.FieldDeathTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DeceasedReceiveMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deceasedreceive.FieldDeathTime:
		return m.DeathTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DeceasedReceiveMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deceasedreceive.FieldDeathTime:
		return m.OldDeathTime(ctx)
	}
	return nil, fmt.Errorf("unknown DeceasedReceive field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DeceasedReceiveMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deceasedreceive.FieldDeathTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeathTime(v)
		return nil
	}
	return fmt.Errorf("unknown DeceasedReceive field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DeceasedReceiveMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DeceasedReceiveMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DeceasedReceiveMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DeceasedReceive numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DeceasedReceiveMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DeceasedReceiveMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeceasedReceiveMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeceasedReceive nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DeceasedReceiveMutation) ResetField(name string) error {
	switch name {
	case deceasedreceive.FieldDeathTime:
		m.ResetDeathTime()
		return nil
	}
	return fmt.Errorf("unknown DeceasedReceive field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DeceasedReceiveMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.doctor != nil {
		edges = append(edges, deceasedreceive.EdgeDoctor)
	}
	if m.relative != nil {
		edges = append(edges, deceasedreceive.EdgeRelative)
	}
	if m.coolroom != nil {
		edges = append(edges, deceasedreceive.EdgeCoolroom)
	}
	if m.patient != nil {
		edges = append(edges, deceasedreceive.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DeceasedReceiveMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deceasedreceive.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	case deceasedreceive.EdgeRelative:
		if id := m.relative; id != nil {
			return []ent.Value{*id}
		}
	case deceasedreceive.EdgeCoolroom:
		if id := m.coolroom; id != nil {
			return []ent.Value{*id}
		}
	case deceasedreceive.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DeceasedReceiveMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DeceasedReceiveMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DeceasedReceiveMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddoctor {
		edges = append(edges, deceasedreceive.EdgeDoctor)
	}
	if m.clearedrelative {
		edges = append(edges, deceasedreceive.EdgeRelative)
	}
	if m.clearedcoolroom {
		edges = append(edges, deceasedreceive.EdgeCoolroom)
	}
	if m.clearedpatient {
		edges = append(edges, deceasedreceive.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DeceasedReceiveMutation) EdgeCleared(name string) bool {
	switch name {
	case deceasedreceive.EdgeDoctor:
		return m.cleareddoctor
	case deceasedreceive.EdgeRelative:
		return m.clearedrelative
	case deceasedreceive.EdgeCoolroom:
		return m.clearedcoolroom
	case deceasedreceive.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DeceasedReceiveMutation) ClearEdge(name string) error {
	switch name {
	case deceasedreceive.EdgeDoctor:
		m.ClearDoctor()
		return nil
	case deceasedreceive.EdgeRelative:
		m.ClearRelative()
		return nil
	case deceasedreceive.EdgeCoolroom:
		m.ClearCoolroom()
		return nil
	case deceasedreceive.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown DeceasedReceive unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DeceasedReceiveMutation) ResetEdge(name string) error {
	switch name {
	case deceasedreceive.EdgeDoctor:
		m.ResetDoctor()
		return nil
	case deceasedreceive.EdgeRelative:
		m.ResetRelative()
		return nil
	case deceasedreceive.EdgeCoolroom:
		m.ResetCoolroom()
		return nil
	case deceasedreceive.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown DeceasedReceive edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	patient_name            *string
	patient_age             *int
	addpatient_age          *int
	clearedFields           map[string]struct{}
	deceasedreceives        map[int]struct{}
	removeddeceasedreceives map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the patient_name field.
func (m *PatientMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the patient_name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old patient_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "patient_name" field.
func (m *PatientMutation) ResetPatientName() {
	m.patient_name = nil
}

// SetPatientAge sets the patient_age field.
func (m *PatientMutation) SetPatientAge(i int) {
	m.patient_age = &i
	m.addpatient_age = nil
}

// PatientAge returns the patient_age value in the mutation.
func (m *PatientMutation) PatientAge() (r int, exists bool) {
	v := m.patient_age
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAge returns the old patient_age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAge: %w", err)
	}
	return oldValue.PatientAge, nil
}

// AddPatientAge adds i to patient_age.
func (m *PatientMutation) AddPatientAge(i int) {
	if m.addpatient_age != nil {
		*m.addpatient_age += i
	} else {
		m.addpatient_age = &i
	}
}

// AddedPatientAge returns the value that was added to the patient_age field in this mutation.
func (m *PatientMutation) AddedPatientAge() (r int, exists bool) {
	v := m.addpatient_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetPatientAge reset all changes of the "patient_age" field.
func (m *PatientMutation) ResetPatientAge() {
	m.patient_age = nil
	m.addpatient_age = nil
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (m *PatientMutation) AddDeceasedreceifeIDs(ids ...int) {
	if m.deceasedreceives == nil {
		m.deceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.deceasedreceives[ids[i]] = struct{}{}
	}
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (m *PatientMutation) RemoveDeceasedreceifeIDs(ids ...int) {
	if m.removeddeceasedreceives == nil {
		m.removeddeceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeceasedreceives[ids[i]] = struct{}{}
	}
}

// RemovedDeceasedreceives returns the removed ids of deceasedreceives.
func (m *PatientMutation) RemovedDeceasedreceivesIDs() (ids []int) {
	for id := range m.removeddeceasedreceives {
		ids = append(ids, id)
	}
	return
}

// DeceasedreceivesIDs returns the deceasedreceives ids in the mutation.
func (m *PatientMutation) DeceasedreceivesIDs() (ids []int) {
	for id := range m.deceasedreceives {
		ids = append(ids, id)
	}
	return
}

// ResetDeceasedreceives reset all changes of the "deceasedreceives" edge.
func (m *PatientMutation) ResetDeceasedreceives() {
	m.deceasedreceives = nil
	m.removeddeceasedreceives = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.patient_name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m.patient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldPatientAge:
		return m.PatientAge()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldPatientAge:
		return m.OldPatientAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addpatient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientAge:
		return m.AddedPatientAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldPatientAge:
		m.ResetPatientAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deceasedreceives != nil {
		edges = append(edges, patient.EdgeDeceasedreceives)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.deceasedreceives))
		for id := range m.deceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeceasedreceives != nil {
		edges = append(edges, patient.EdgeDeceasedreceives)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.removeddeceasedreceives))
		for id := range m.removeddeceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeDeceasedreceives:
		m.ResetDeceasedreceives()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// RelativeMutation represents an operation that mutate the Relatives
// nodes in the graph.
type RelativeMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	relative_name           *string
	clearedFields           map[string]struct{}
	deceasedreceives        map[int]struct{}
	removeddeceasedreceives map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Relative, error)
}

var _ ent.Mutation = (*RelativeMutation)(nil)

// relativeOption allows to manage the mutation configuration using functional options.
type relativeOption func(*RelativeMutation)

// newRelativeMutation creates new mutation for $n.Name.
func newRelativeMutation(c config, op Op, opts ...relativeOption) *RelativeMutation {
	m := &RelativeMutation{
		config:        c,
		op:            op,
		typ:           TypeRelative,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRelativeID sets the id field of the mutation.
func withRelativeID(id int) relativeOption {
	return func(m *RelativeMutation) {
		var (
			err   error
			once  sync.Once
			value *Relative
		)
		m.oldValue = func(ctx context.Context) (*Relative, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Relative.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRelative sets the old Relative of the mutation.
func withRelative(node *Relative) relativeOption {
	return func(m *RelativeMutation) {
		m.oldValue = func(context.Context) (*Relative, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RelativeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RelativeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RelativeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRelativeName sets the relative_name field.
func (m *RelativeMutation) SetRelativeName(s string) {
	m.relative_name = &s
}

// RelativeName returns the relative_name value in the mutation.
func (m *RelativeMutation) RelativeName() (r string, exists bool) {
	v := m.relative_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRelativeName returns the old relative_name value of the Relative.
// If the Relative object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RelativeMutation) OldRelativeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRelativeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRelativeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelativeName: %w", err)
	}
	return oldValue.RelativeName, nil
}

// ResetRelativeName reset all changes of the "relative_name" field.
func (m *RelativeMutation) ResetRelativeName() {
	m.relative_name = nil
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (m *RelativeMutation) AddDeceasedreceifeIDs(ids ...int) {
	if m.deceasedreceives == nil {
		m.deceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.deceasedreceives[ids[i]] = struct{}{}
	}
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (m *RelativeMutation) RemoveDeceasedreceifeIDs(ids ...int) {
	if m.removeddeceasedreceives == nil {
		m.removeddeceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeceasedreceives[ids[i]] = struct{}{}
	}
}

// RemovedDeceasedreceives returns the removed ids of deceasedreceives.
func (m *RelativeMutation) RemovedDeceasedreceivesIDs() (ids []int) {
	for id := range m.removeddeceasedreceives {
		ids = append(ids, id)
	}
	return
}

// DeceasedreceivesIDs returns the deceasedreceives ids in the mutation.
func (m *RelativeMutation) DeceasedreceivesIDs() (ids []int) {
	for id := range m.deceasedreceives {
		ids = append(ids, id)
	}
	return
}

// ResetDeceasedreceives reset all changes of the "deceasedreceives" edge.
func (m *RelativeMutation) ResetDeceasedreceives() {
	m.deceasedreceives = nil
	m.removeddeceasedreceives = nil
}

// Op returns the operation name.
func (m *RelativeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Relative).
func (m *RelativeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RelativeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.relative_name != nil {
		fields = append(fields, relative.FieldRelativeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RelativeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case relative.FieldRelativeName:
		return m.RelativeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RelativeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case relative.FieldRelativeName:
		return m.OldRelativeName(ctx)
	}
	return nil, fmt.Errorf("unknown Relative field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RelativeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case relative.FieldRelativeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelativeName(v)
		return nil
	}
	return fmt.Errorf("unknown Relative field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RelativeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RelativeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RelativeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Relative numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RelativeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RelativeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RelativeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Relative nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RelativeMutation) ResetField(name string) error {
	switch name {
	case relative.FieldRelativeName:
		m.ResetRelativeName()
		return nil
	}
	return fmt.Errorf("unknown Relative field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RelativeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deceasedreceives != nil {
		edges = append(edges, relative.EdgeDeceasedreceives)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RelativeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case relative.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.deceasedreceives))
		for id := range m.deceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RelativeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeceasedreceives != nil {
		edges = append(edges, relative.EdgeDeceasedreceives)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RelativeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case relative.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.removeddeceasedreceives))
		for id := range m.removeddeceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RelativeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RelativeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RelativeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Relative unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RelativeMutation) ResetEdge(name string) error {
	switch name {
	case relative.EdgeDeceasedreceives:
		m.ResetDeceasedreceives()
		return nil
	}
	return fmt.Errorf("unknown Relative edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	user_name               *string
	useremail               *string
	clearedFields           map[string]struct{}
	deceasedreceives        map[int]struct{}
	removeddeceasedreceives map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserName sets the user_name field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the user_name value in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old user_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName reset all changes of the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetUseremail sets the useremail field.
func (m *UserMutation) SetUseremail(s string) {
	m.useremail = &s
}

// Useremail returns the useremail value in the mutation.
func (m *UserMutation) Useremail() (r string, exists bool) {
	v := m.useremail
	if v == nil {
		return
	}
	return *v, true
}

// OldUseremail returns the old useremail value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUseremail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUseremail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUseremail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseremail: %w", err)
	}
	return oldValue.Useremail, nil
}

// ResetUseremail reset all changes of the "useremail" field.
func (m *UserMutation) ResetUseremail() {
	m.useremail = nil
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (m *UserMutation) AddDeceasedreceifeIDs(ids ...int) {
	if m.deceasedreceives == nil {
		m.deceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.deceasedreceives[ids[i]] = struct{}{}
	}
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (m *UserMutation) RemoveDeceasedreceifeIDs(ids ...int) {
	if m.removeddeceasedreceives == nil {
		m.removeddeceasedreceives = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddeceasedreceives[ids[i]] = struct{}{}
	}
}

// RemovedDeceasedreceives returns the removed ids of deceasedreceives.
func (m *UserMutation) RemovedDeceasedreceivesIDs() (ids []int) {
	for id := range m.removeddeceasedreceives {
		ids = append(ids, id)
	}
	return
}

// DeceasedreceivesIDs returns the deceasedreceives ids in the mutation.
func (m *UserMutation) DeceasedreceivesIDs() (ids []int) {
	for id := range m.deceasedreceives {
		ids = append(ids, id)
	}
	return
}

// ResetDeceasedreceives reset all changes of the "deceasedreceives" edge.
func (m *UserMutation) ResetDeceasedreceives() {
	m.deceasedreceives = nil
	m.removeddeceasedreceives = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.useremail != nil {
		fields = append(fields, user.FieldUseremail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserName:
		return m.UserName()
	case user.FieldUseremail:
		return m.Useremail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldUseremail:
		return m.OldUseremail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldUseremail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseremail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldUseremail:
		m.ResetUseremail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deceasedreceives != nil {
		edges = append(edges, user.EdgeDeceasedreceives)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.deceasedreceives))
		for id := range m.deceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeceasedreceives != nil {
		edges = append(edges, user.EdgeDeceasedreceives)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDeceasedreceives:
		ids := make([]ent.Value, 0, len(m.removeddeceasedreceives))
		for id := range m.removeddeceasedreceives {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDeceasedreceives:
		m.ResetDeceasedreceives()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
