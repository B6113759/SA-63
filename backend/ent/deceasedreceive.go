// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/B6113759/app/ent/coolroom"
	"github.com/B6113759/app/ent/deceasedreceive"
	"github.com/B6113759/app/ent/patient"
	"github.com/B6113759/app/ent/relative"
	"github.com/B6113759/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// DeceasedReceive is the model entity for the DeceasedReceive schema.
type DeceasedReceive struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeathTime holds the value of the "death_time" field.
	DeathTime time.Time `json:"death_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeceasedReceiveQuery when eager-loading is set.
	Edges       DeceasedReceiveEdges `json:"edges"`
	coolroom_id *int
	patient_id  *int
	relative_id *int
	doctor_id   *int
}

// DeceasedReceiveEdges holds the relations/edges for other nodes in the graph.
type DeceasedReceiveEdges struct {
	// Doctor holds the value of the doctor edge.
	Doctor *User
	// Relative holds the value of the relative edge.
	Relative *Relative
	// Coolroom holds the value of the coolroom edge.
	Coolroom *Coolroom
	// Patient holds the value of the patient edge.
	Patient *Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeceasedReceiveEdges) DoctorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// RelativeOrErr returns the Relative value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeceasedReceiveEdges) RelativeOrErr() (*Relative, error) {
	if e.loadedTypes[1] {
		if e.Relative == nil {
			// The edge relative was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: relative.Label}
		}
		return e.Relative, nil
	}
	return nil, &NotLoadedError{edge: "relative"}
}

// CoolroomOrErr returns the Coolroom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeceasedReceiveEdges) CoolroomOrErr() (*Coolroom, error) {
	if e.loadedTypes[2] {
		if e.Coolroom == nil {
			// The edge coolroom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: coolroom.Label}
		}
		return e.Coolroom, nil
	}
	return nil, &NotLoadedError{edge: "coolroom"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeceasedReceiveEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[3] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeceasedReceive) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // death_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DeceasedReceive) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // coolroom_id
		&sql.NullInt64{}, // patient_id
		&sql.NullInt64{}, // relative_id
		&sql.NullInt64{}, // doctor_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeceasedReceive fields.
func (dr *DeceasedReceive) assignValues(values ...interface{}) error {
	if m, n := len(values), len(deceasedreceive.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	dr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field death_time", values[0])
	} else if value.Valid {
		dr.DeathTime = value.Time
	}
	values = values[1:]
	if len(values) == len(deceasedreceive.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field coolroom_id", value)
		} else if value.Valid {
			dr.coolroom_id = new(int)
			*dr.coolroom_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_id", value)
		} else if value.Valid {
			dr.patient_id = new(int)
			*dr.patient_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field relative_id", value)
		} else if value.Valid {
			dr.relative_id = new(int)
			*dr.relative_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			dr.doctor_id = new(int)
			*dr.doctor_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDoctor queries the doctor edge of the DeceasedReceive.
func (dr *DeceasedReceive) QueryDoctor() *UserQuery {
	return (&DeceasedReceiveClient{config: dr.config}).QueryDoctor(dr)
}

// QueryRelative queries the relative edge of the DeceasedReceive.
func (dr *DeceasedReceive) QueryRelative() *RelativeQuery {
	return (&DeceasedReceiveClient{config: dr.config}).QueryRelative(dr)
}

// QueryCoolroom queries the coolroom edge of the DeceasedReceive.
func (dr *DeceasedReceive) QueryCoolroom() *CoolroomQuery {
	return (&DeceasedReceiveClient{config: dr.config}).QueryCoolroom(dr)
}

// QueryPatient queries the patient edge of the DeceasedReceive.
func (dr *DeceasedReceive) QueryPatient() *PatientQuery {
	return (&DeceasedReceiveClient{config: dr.config}).QueryPatient(dr)
}

// Update returns a builder for updating this DeceasedReceive.
// Note that, you need to call DeceasedReceive.Unwrap() before calling this method, if this DeceasedReceive
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DeceasedReceive) Update() *DeceasedReceiveUpdateOne {
	return (&DeceasedReceiveClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dr *DeceasedReceive) Unwrap() *DeceasedReceive {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeceasedReceive is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DeceasedReceive) String() string {
	var builder strings.Builder
	builder.WriteString("DeceasedReceive(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", death_time=")
	builder.WriteString(dr.DeathTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeceasedReceives is a parsable slice of DeceasedReceive.
type DeceasedReceives []*DeceasedReceive

func (dr DeceasedReceives) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
