// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6113759/app/ent/deceasedreceive"
	"github.com/B6113759/app/ent/predicate"
	"github.com/B6113759/app/ent/relative"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RelativeUpdate is the builder for updating Relative entities.
type RelativeUpdate struct {
	config
	hooks      []Hook
	mutation   *RelativeMutation
	predicates []predicate.Relative
}

// Where adds a new predicate for the builder.
func (ru *RelativeUpdate) Where(ps ...predicate.Relative) *RelativeUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRelativeName sets the relative_name field.
func (ru *RelativeUpdate) SetRelativeName(s string) *RelativeUpdate {
	ru.mutation.SetRelativeName(s)
	return ru
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (ru *RelativeUpdate) AddDeceasedreceifeIDs(ids ...int) *RelativeUpdate {
	ru.mutation.AddDeceasedreceifeIDs(ids...)
	return ru
}

// AddDeceasedreceives adds the deceasedreceives edges to DeceasedReceive.
func (ru *RelativeUpdate) AddDeceasedreceives(d ...*DeceasedReceive) *RelativeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ru.AddDeceasedreceifeIDs(ids...)
}

// Mutation returns the RelativeMutation object of the builder.
func (ru *RelativeUpdate) Mutation() *RelativeMutation {
	return ru.mutation
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (ru *RelativeUpdate) RemoveDeceasedreceifeIDs(ids ...int) *RelativeUpdate {
	ru.mutation.RemoveDeceasedreceifeIDs(ids...)
	return ru
}

// RemoveDeceasedreceives removes deceasedreceives edges to DeceasedReceive.
func (ru *RelativeUpdate) RemoveDeceasedreceives(d ...*DeceasedReceive) *RelativeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ru.RemoveDeceasedreceifeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RelativeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.RelativeName(); ok {
		if err := relative.RelativeNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "relative_name", err: fmt.Errorf("ent: validator failed for field \"relative_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelativeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RelativeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RelativeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RelativeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RelativeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   relative.Table,
			Columns: relative.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: relative.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RelativeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: relative.FieldRelativeName,
		})
	}
	if nodes := ru.mutation.RemovedDeceasedreceivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relative.DeceasedreceivesTable,
			Columns: []string{relative.DeceasedreceivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deceasedreceive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DeceasedreceivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relative.DeceasedreceivesTable,
			Columns: []string{relative.DeceasedreceivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deceasedreceive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relative.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RelativeUpdateOne is the builder for updating a single Relative entity.
type RelativeUpdateOne struct {
	config
	hooks    []Hook
	mutation *RelativeMutation
}

// SetRelativeName sets the relative_name field.
func (ruo *RelativeUpdateOne) SetRelativeName(s string) *RelativeUpdateOne {
	ruo.mutation.SetRelativeName(s)
	return ruo
}

// AddDeceasedreceifeIDs adds the deceasedreceives edge to DeceasedReceive by ids.
func (ruo *RelativeUpdateOne) AddDeceasedreceifeIDs(ids ...int) *RelativeUpdateOne {
	ruo.mutation.AddDeceasedreceifeIDs(ids...)
	return ruo
}

// AddDeceasedreceives adds the deceasedreceives edges to DeceasedReceive.
func (ruo *RelativeUpdateOne) AddDeceasedreceives(d ...*DeceasedReceive) *RelativeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ruo.AddDeceasedreceifeIDs(ids...)
}

// Mutation returns the RelativeMutation object of the builder.
func (ruo *RelativeUpdateOne) Mutation() *RelativeMutation {
	return ruo.mutation
}

// RemoveDeceasedreceifeIDs removes the deceasedreceives edge to DeceasedReceive by ids.
func (ruo *RelativeUpdateOne) RemoveDeceasedreceifeIDs(ids ...int) *RelativeUpdateOne {
	ruo.mutation.RemoveDeceasedreceifeIDs(ids...)
	return ruo
}

// RemoveDeceasedreceives removes deceasedreceives edges to DeceasedReceive.
func (ruo *RelativeUpdateOne) RemoveDeceasedreceives(d ...*DeceasedReceive) *RelativeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ruo.RemoveDeceasedreceifeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RelativeUpdateOne) Save(ctx context.Context) (*Relative, error) {
	if v, ok := ruo.mutation.RelativeName(); ok {
		if err := relative.RelativeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "relative_name", err: fmt.Errorf("ent: validator failed for field \"relative_name\": %w", err)}
		}
	}

	var (
		err  error
		node *Relative
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelativeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RelativeUpdateOne) SaveX(ctx context.Context) *Relative {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RelativeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RelativeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RelativeUpdateOne) sqlSave(ctx context.Context) (r *Relative, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   relative.Table,
			Columns: relative.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: relative.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Relative.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.RelativeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: relative.FieldRelativeName,
		})
	}
	if nodes := ruo.mutation.RemovedDeceasedreceivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relative.DeceasedreceivesTable,
			Columns: []string{relative.DeceasedreceivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deceasedreceive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DeceasedreceivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relative.DeceasedreceivesTable,
			Columns: []string{relative.DeceasedreceivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deceasedreceive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Relative{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relative.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
