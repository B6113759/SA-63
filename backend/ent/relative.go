// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B6113759/app/ent/relative"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Relative is the model entity for the Relative schema.
type Relative struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RelativeName holds the value of the "relative_name" field.
	RelativeName string `json:"relative_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RelativeQuery when eager-loading is set.
	Edges RelativeEdges `json:"edges"`
}

// RelativeEdges holds the relations/edges for other nodes in the graph.
type RelativeEdges struct {
	// Deceasedreceives holds the value of the deceasedreceives edge.
	Deceasedreceives []*DeceasedReceive
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeceasedreceivesOrErr returns the Deceasedreceives value or an error if the edge
// was not loaded in eager-loading.
func (e RelativeEdges) DeceasedreceivesOrErr() ([]*DeceasedReceive, error) {
	if e.loadedTypes[0] {
		return e.Deceasedreceives, nil
	}
	return nil, &NotLoadedError{edge: "deceasedreceives"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Relative) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // relative_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Relative fields.
func (r *Relative) assignValues(values ...interface{}) error {
	if m, n := len(values), len(relative.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field relative_name", values[0])
	} else if value.Valid {
		r.RelativeName = value.String
	}
	return nil
}

// QueryDeceasedreceives queries the deceasedreceives edge of the Relative.
func (r *Relative) QueryDeceasedreceives() *DeceasedReceiveQuery {
	return (&RelativeClient{config: r.config}).QueryDeceasedreceives(r)
}

// Update returns a builder for updating this Relative.
// Note that, you need to call Relative.Unwrap() before calling this method, if this Relative
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Relative) Update() *RelativeUpdateOne {
	return (&RelativeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Relative) Unwrap() *Relative {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Relative is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Relative) String() string {
	var builder strings.Builder
	builder.WriteString("Relative(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", relative_name=")
	builder.WriteString(r.RelativeName)
	builder.WriteByte(')')
	return builder.String()
}

// Relatives is a parsable slice of Relative.
type Relatives []*Relative

func (r Relatives) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
