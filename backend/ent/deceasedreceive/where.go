// Code generated by entc, DO NOT EDIT.

package deceasedreceive

import (
	"time"

	"github.com/B6113759/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeathTime applies equality check predicate on the "death_time" field. It's identical to DeathTimeEQ.
func DeathTime(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeathTime), v))
	})
}

// DeathTimeEQ applies the EQ predicate on the "death_time" field.
func DeathTimeEQ(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeathTime), v))
	})
}

// DeathTimeNEQ applies the NEQ predicate on the "death_time" field.
func DeathTimeNEQ(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeathTime), v))
	})
}

// DeathTimeIn applies the In predicate on the "death_time" field.
func DeathTimeIn(vs ...time.Time) predicate.DeceasedReceive {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeathTime), v...))
	})
}

// DeathTimeNotIn applies the NotIn predicate on the "death_time" field.
func DeathTimeNotIn(vs ...time.Time) predicate.DeceasedReceive {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeathTime), v...))
	})
}

// DeathTimeGT applies the GT predicate on the "death_time" field.
func DeathTimeGT(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeathTime), v))
	})
}

// DeathTimeGTE applies the GTE predicate on the "death_time" field.
func DeathTimeGTE(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeathTime), v))
	})
}

// DeathTimeLT applies the LT predicate on the "death_time" field.
func DeathTimeLT(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeathTime), v))
	})
}

// DeathTimeLTE applies the LTE predicate on the "death_time" field.
func DeathTimeLTE(v time.Time) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeathTime), v))
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.User) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelative applies the HasEdge predicate on the "relative" edge.
func HasRelative() predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelativeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelativeTable, RelativeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelativeWith applies the HasEdge predicate on the "relative" edge with a given conditions (other predicates).
func HasRelativeWith(preds ...predicate.Relative) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelativeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelativeTable, RelativeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoolroom applies the HasEdge predicate on the "coolroom" edge.
func HasCoolroom() predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoolroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CoolroomTable, CoolroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoolroomWith applies the HasEdge predicate on the "coolroom" edge with a given conditions (other predicates).
func HasCoolroomWith(preds ...predicate.Coolroom) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CoolroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CoolroomTable, CoolroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.DeceasedReceive) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.DeceasedReceive) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeceasedReceive) predicate.DeceasedReceive {
	return predicate.DeceasedReceive(func(s *sql.Selector) {
		p(s.Not())
	})
}
