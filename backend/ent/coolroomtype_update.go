// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6113759/app/ent/coolroom"
	"github.com/B6113759/app/ent/coolroomtype"
	"github.com/B6113759/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CoolroomTypeUpdate is the builder for updating CoolroomType entities.
type CoolroomTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *CoolroomTypeMutation
	predicates []predicate.CoolroomType
}

// Where adds a new predicate for the builder.
func (ctu *CoolroomTypeUpdate) Where(ps ...predicate.CoolroomType) *CoolroomTypeUpdate {
	ctu.predicates = append(ctu.predicates, ps...)
	return ctu
}

// SetCoolroomtypeName sets the coolroomtype_name field.
func (ctu *CoolroomTypeUpdate) SetCoolroomtypeName(s string) *CoolroomTypeUpdate {
	ctu.mutation.SetCoolroomtypeName(s)
	return ctu
}

// AddCoolroomIDs adds the coolrooms edge to Coolroom by ids.
func (ctu *CoolroomTypeUpdate) AddCoolroomIDs(ids ...int) *CoolroomTypeUpdate {
	ctu.mutation.AddCoolroomIDs(ids...)
	return ctu
}

// AddCoolrooms adds the coolrooms edges to Coolroom.
func (ctu *CoolroomTypeUpdate) AddCoolrooms(c ...*Coolroom) *CoolroomTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddCoolroomIDs(ids...)
}

// Mutation returns the CoolroomTypeMutation object of the builder.
func (ctu *CoolroomTypeUpdate) Mutation() *CoolroomTypeMutation {
	return ctu.mutation
}

// RemoveCoolroomIDs removes the coolrooms edge to Coolroom by ids.
func (ctu *CoolroomTypeUpdate) RemoveCoolroomIDs(ids ...int) *CoolroomTypeUpdate {
	ctu.mutation.RemoveCoolroomIDs(ids...)
	return ctu
}

// RemoveCoolrooms removes coolrooms edges to Coolroom.
func (ctu *CoolroomTypeUpdate) RemoveCoolrooms(c ...*Coolroom) *CoolroomTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveCoolroomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ctu *CoolroomTypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ctu.mutation.CoolroomtypeName(); ok {
		if err := coolroomtype.CoolroomtypeNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "coolroomtype_name", err: fmt.Errorf("ent: validator failed for field \"coolroomtype_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ctu.hooks) == 0 {
		affected, err = ctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoolroomTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctu.mutation = mutation
			affected, err = ctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctu.hooks) - 1; i >= 0; i-- {
			mut = ctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CoolroomTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CoolroomTypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CoolroomTypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *CoolroomTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coolroomtype.Table,
			Columns: coolroomtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coolroomtype.FieldID,
			},
		},
	}
	if ps := ctu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.CoolroomtypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coolroomtype.FieldCoolroomtypeName,
		})
	}
	if nodes := ctu.mutation.RemovedCoolroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coolroomtype.CoolroomsTable,
			Columns: []string{coolroomtype.CoolroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.CoolroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coolroomtype.CoolroomsTable,
			Columns: []string{coolroomtype.CoolroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coolroomtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CoolroomTypeUpdateOne is the builder for updating a single CoolroomType entity.
type CoolroomTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *CoolroomTypeMutation
}

// SetCoolroomtypeName sets the coolroomtype_name field.
func (ctuo *CoolroomTypeUpdateOne) SetCoolroomtypeName(s string) *CoolroomTypeUpdateOne {
	ctuo.mutation.SetCoolroomtypeName(s)
	return ctuo
}

// AddCoolroomIDs adds the coolrooms edge to Coolroom by ids.
func (ctuo *CoolroomTypeUpdateOne) AddCoolroomIDs(ids ...int) *CoolroomTypeUpdateOne {
	ctuo.mutation.AddCoolroomIDs(ids...)
	return ctuo
}

// AddCoolrooms adds the coolrooms edges to Coolroom.
func (ctuo *CoolroomTypeUpdateOne) AddCoolrooms(c ...*Coolroom) *CoolroomTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddCoolroomIDs(ids...)
}

// Mutation returns the CoolroomTypeMutation object of the builder.
func (ctuo *CoolroomTypeUpdateOne) Mutation() *CoolroomTypeMutation {
	return ctuo.mutation
}

// RemoveCoolroomIDs removes the coolrooms edge to Coolroom by ids.
func (ctuo *CoolroomTypeUpdateOne) RemoveCoolroomIDs(ids ...int) *CoolroomTypeUpdateOne {
	ctuo.mutation.RemoveCoolroomIDs(ids...)
	return ctuo
}

// RemoveCoolrooms removes coolrooms edges to Coolroom.
func (ctuo *CoolroomTypeUpdateOne) RemoveCoolrooms(c ...*Coolroom) *CoolroomTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveCoolroomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ctuo *CoolroomTypeUpdateOne) Save(ctx context.Context) (*CoolroomType, error) {
	if v, ok := ctuo.mutation.CoolroomtypeName(); ok {
		if err := coolroomtype.CoolroomtypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "coolroomtype_name", err: fmt.Errorf("ent: validator failed for field \"coolroomtype_name\": %w", err)}
		}
	}

	var (
		err  error
		node *CoolroomType
	)
	if len(ctuo.hooks) == 0 {
		node, err = ctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoolroomTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctuo.mutation = mutation
			node, err = ctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctuo.hooks) - 1; i >= 0; i-- {
			mut = ctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CoolroomTypeUpdateOne) SaveX(ctx context.Context) *CoolroomType {
	ct, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ct
}

// Exec executes the query on the entity.
func (ctuo *CoolroomTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CoolroomTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *CoolroomTypeUpdateOne) sqlSave(ctx context.Context) (ct *CoolroomType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coolroomtype.Table,
			Columns: coolroomtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coolroomtype.FieldID,
			},
		},
	}
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CoolroomType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ctuo.mutation.CoolroomtypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coolroomtype.FieldCoolroomtypeName,
		})
	}
	if nodes := ctuo.mutation.RemovedCoolroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coolroomtype.CoolroomsTable,
			Columns: []string{coolroomtype.CoolroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.CoolroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coolroomtype.CoolroomsTable,
			Columns: []string{coolroomtype.CoolroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coolroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ct = &CoolroomType{config: ctuo.config}
	_spec.Assign = ct.assignValues
	_spec.ScanValues = ct.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coolroomtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ct, nil
}
