/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDeceasedReceive,
    ControllersDeceasedReceiveFromJSON,
    ControllersDeceasedReceiveToJSON,
    EntCoolroom,
    EntCoolroomFromJSON,
    EntCoolroomToJSON,
    EntCoolroomType,
    EntCoolroomTypeFromJSON,
    EntCoolroomTypeToJSON,
    EntDeceasedReceive,
    EntDeceasedReceiveFromJSON,
    EntDeceasedReceiveToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntRelative,
    EntRelativeFromJSON,
    EntRelativeToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateCoolroomRequest {
    coolroom: EntCoolroom;
}

export interface CreateCoolroomtypeRequest {
    coolroomtype: EntCoolroomType;
}

export interface CreateDeceasedreceiveRequest {
    deceasedreceive: ControllersDeceasedReceive;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreateRelativeRequest {
    relative: EntRelative;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteCoolroomRequest {
    id: number;
}

export interface DeleteCoolroomtypeRequest {
    id: number;
}

export interface DeleteDeceasedreceiveRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeleteRelativeRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetCoolroomRequest {
    id: number;
}

export interface GetCoolroomtypeRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetRelativeRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListCoolroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListCoolroomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDeceasedreceiveRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListRelativeRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCoolroomRequest {
    id: number;
    coolroom: EntCoolroom;
}

export interface UpdateCoolroomtypeRequest {
    id: number;
    coolroomtype: EntCoolroomType;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdateRelativeRequest {
    id: number;
    relative: EntRelative;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create coolroom
     * Create coolroom
     */
    async createCoolroomRaw(requestParameters: CreateCoolroomRequest): Promise<runtime.ApiResponse<EntCoolroom>> {
        if (requestParameters.coolroom === null || requestParameters.coolroom === undefined) {
            throw new runtime.RequiredError('coolroom','Required parameter requestParameters.coolroom was null or undefined when calling createCoolroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coolrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoolroomToJSON(requestParameters.coolroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomFromJSON(jsonValue));
    }

    /**
     * Create coolroom
     * Create coolroom
     */
    async createCoolroom(requestParameters: CreateCoolroomRequest): Promise<EntCoolroom> {
        const response = await this.createCoolroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create coolroomtype
     * Create coolroomtype
     */
    async createCoolroomtypeRaw(requestParameters: CreateCoolroomtypeRequest): Promise<runtime.ApiResponse<EntCoolroomType>> {
        if (requestParameters.coolroomtype === null || requestParameters.coolroomtype === undefined) {
            throw new runtime.RequiredError('coolroomtype','Required parameter requestParameters.coolroomtype was null or undefined when calling createCoolroomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coolroomtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoolroomTypeToJSON(requestParameters.coolroomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomTypeFromJSON(jsonValue));
    }

    /**
     * Create coolroomtype
     * Create coolroomtype
     */
    async createCoolroomtype(requestParameters: CreateCoolroomtypeRequest): Promise<EntCoolroomType> {
        const response = await this.createCoolroomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create deceasedreceive
     * Create deceasedreceive
     */
    async createDeceasedreceiveRaw(requestParameters: CreateDeceasedreceiveRequest): Promise<runtime.ApiResponse<EntDeceasedReceive>> {
        if (requestParameters.deceasedreceive === null || requestParameters.deceasedreceive === undefined) {
            throw new runtime.RequiredError('deceasedreceive','Required parameter requestParameters.deceasedreceive was null or undefined when calling createDeceasedreceive.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deceasedreceives`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDeceasedReceiveToJSON(requestParameters.deceasedreceive),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDeceasedReceiveFromJSON(jsonValue));
    }

    /**
     * Create deceasedreceive
     * Create deceasedreceive
     */
    async createDeceasedreceive(requestParameters: CreateDeceasedreceiveRequest): Promise<EntDeceasedReceive> {
        const response = await this.createDeceasedreceiveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create relative
     * Create relative
     */
    async createRelativeRaw(requestParameters: CreateRelativeRequest): Promise<runtime.ApiResponse<EntRelative>> {
        if (requestParameters.relative === null || requestParameters.relative === undefined) {
            throw new runtime.RequiredError('relative','Required parameter requestParameters.relative was null or undefined when calling createRelative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/relatives`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRelativeToJSON(requestParameters.relative),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRelativeFromJSON(jsonValue));
    }

    /**
     * Create relative
     * Create relative
     */
    async createRelative(requestParameters: CreateRelativeRequest): Promise<EntRelative> {
        const response = await this.createRelativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coolroom by ID
     * Delete a coolroom entity by ID
     */
    async deleteCoolroomRaw(requestParameters: DeleteCoolroomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCoolroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get coolroom by ID
     * Delete a coolroom entity by ID
     */
    async deleteCoolroom(requestParameters: DeleteCoolroomRequest): Promise<object> {
        const response = await this.deleteCoolroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coolroomtype by ID
     * Delete a coolroomtype entity by ID
     */
    async deleteCoolroomtypeRaw(requestParameters: DeleteCoolroomtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCoolroomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolroomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get coolroomtype by ID
     * Delete a coolroomtype entity by ID
     */
    async deleteCoolroomtype(requestParameters: DeleteCoolroomtypeRequest): Promise<object> {
        const response = await this.deleteCoolroomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get deceasedreceive by ID
     * Delete a deceasedreceive entity by ID
     */
    async deleteDeceasedreceiveRaw(requestParameters: DeleteDeceasedreceiveRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeceasedreceive.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deceasedreceives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get deceasedreceive by ID
     * Delete a deceasedreceive entity by ID
     */
    async deleteDeceasedreceive(requestParameters: DeleteDeceasedreceiveRequest): Promise<object> {
        const response = await this.deleteDeceasedreceiveRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get relative by ID
     * Delete a relative entity by ID
     */
    async deleteRelativeRaw(requestParameters: DeleteRelativeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRelative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/relatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get relative by ID
     * Delete a relative entity by ID
     */
    async deleteRelative(requestParameters: DeleteRelativeRequest): Promise<object> {
        const response = await this.deleteRelativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coolroom by ID
     * Get a coolroom entity by ID
     */
    async getCoolroomRaw(requestParameters: GetCoolroomRequest): Promise<runtime.ApiResponse<EntCoolroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCoolroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomFromJSON(jsonValue));
    }

    /**
     * get coolroom by ID
     * Get a coolroom entity by ID
     */
    async getCoolroom(requestParameters: GetCoolroomRequest): Promise<EntCoolroom> {
        const response = await this.getCoolroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coolroomtype by ID
     * Get a coolroomtype entity by ID
     */
    async getCoolroomtypeRaw(requestParameters: GetCoolroomtypeRequest): Promise<runtime.ApiResponse<EntCoolroomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCoolroomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolroomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomTypeFromJSON(jsonValue));
    }

    /**
     * get coolroomtype by ID
     * Get a coolroomtype entity by ID
     */
    async getCoolroomtype(requestParameters: GetCoolroomtypeRequest): Promise<EntCoolroomType> {
        const response = await this.getCoolroomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get relative by ID
     * Get a relative entity by ID
     */
    async getRelativeRaw(requestParameters: GetRelativeRequest): Promise<runtime.ApiResponse<EntRelative>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRelative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/relatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRelativeFromJSON(jsonValue));
    }

    /**
     * get relative by ID
     * Get a relative entity by ID
     */
    async getRelative(requestParameters: GetRelativeRequest): Promise<EntRelative> {
        const response = await this.getRelativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list coolroom entities
     * List coolroom entities
     */
    async listCoolroomRaw(requestParameters: ListCoolroomRequest): Promise<runtime.ApiResponse<Array<EntCoolroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCoolroomFromJSON));
    }

    /**
     * list coolroom entities
     * List coolroom entities
     */
    async listCoolroom(requestParameters: ListCoolroomRequest): Promise<Array<EntCoolroom>> {
        const response = await this.listCoolroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list coolroomtype entities
     * List coolroomtype entities
     */
    async listCoolroomtypeRaw(requestParameters: ListCoolroomtypeRequest): Promise<runtime.ApiResponse<Array<EntCoolroomType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coolroomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCoolroomTypeFromJSON));
    }

    /**
     * list coolroomtype entities
     * List coolroomtype entities
     */
    async listCoolroomtype(requestParameters: ListCoolroomtypeRequest): Promise<Array<EntCoolroomType>> {
        const response = await this.listCoolroomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list deceasedreceive entities
     * List deceasedreceive entities
     */
    async listDeceasedreceiveRaw(requestParameters: ListDeceasedreceiveRequest): Promise<runtime.ApiResponse<Array<EntDeceasedReceive>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deceasedreceives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDeceasedReceiveFromJSON));
    }

    /**
     * list deceasedreceive entities
     * List deceasedreceive entities
     */
    async listDeceasedreceive(requestParameters: ListDeceasedreceiveRequest): Promise<Array<EntDeceasedReceive>> {
        const response = await this.listDeceasedreceiveRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list relative entities
     * List relative entities
     */
    async listRelativeRaw(requestParameters: ListRelativeRequest): Promise<runtime.ApiResponse<Array<EntRelative>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/relatives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRelativeFromJSON));
    }

    /**
     * list relative entities
     * List relative entities
     */
    async listRelative(requestParameters: ListRelativeRequest): Promise<Array<EntRelative>> {
        const response = await this.listRelativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update coolroom by ID
     * Update a coolroom entity by ID
     */
    async updateCoolroomRaw(requestParameters: UpdateCoolroomRequest): Promise<runtime.ApiResponse<EntCoolroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCoolroom.');
        }

        if (requestParameters.coolroom === null || requestParameters.coolroom === undefined) {
            throw new runtime.RequiredError('coolroom','Required parameter requestParameters.coolroom was null or undefined when calling updateCoolroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coolrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoolroomToJSON(requestParameters.coolroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomFromJSON(jsonValue));
    }

    /**
     * update coolroom by ID
     * Update a coolroom entity by ID
     */
    async updateCoolroom(requestParameters: UpdateCoolroomRequest): Promise<EntCoolroom> {
        const response = await this.updateCoolroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update coolroomtype by ID
     * Update a coolroomtype entity by ID
     */
    async updateCoolroomtypeRaw(requestParameters: UpdateCoolroomtypeRequest): Promise<runtime.ApiResponse<EntCoolroomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCoolroomtype.');
        }

        if (requestParameters.coolroomtype === null || requestParameters.coolroomtype === undefined) {
            throw new runtime.RequiredError('coolroomtype','Required parameter requestParameters.coolroomtype was null or undefined when calling updateCoolroomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coolroomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoolroomTypeToJSON(requestParameters.coolroomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoolroomTypeFromJSON(jsonValue));
    }

    /**
     * update coolroomtype by ID
     * Update a coolroomtype entity by ID
     */
    async updateCoolroomtype(requestParameters: UpdateCoolroomtypeRequest): Promise<EntCoolroomType> {
        const response = await this.updateCoolroomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update relative by ID
     * Update a relative entity by ID
     */
    async updateRelativeRaw(requestParameters: UpdateRelativeRequest): Promise<runtime.ApiResponse<EntRelative>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRelative.');
        }

        if (requestParameters.relative === null || requestParameters.relative === undefined) {
            throw new runtime.RequiredError('relative','Required parameter requestParameters.relative was null or undefined when calling updateRelative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/relatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRelativeToJSON(requestParameters.relative),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRelativeFromJSON(jsonValue));
    }

    /**
     * update relative by ID
     * Update a relative entity by ID
     */
    async updateRelative(requestParameters: UpdateRelativeRequest): Promise<EntRelative> {
        const response = await this.updateRelativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
